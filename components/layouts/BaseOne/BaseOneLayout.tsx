import { collection, doc, getDoc, getDocs, query, where } from 'firebase/firestore'
import Head from 'next/head'
import React, { useEffect } from 'react'
import { useAuthState } from 'react-firebase-hooks/auth'
import { useDispatch, useSelector } from 'react-redux'
import { ICommunityData } from '../../../customTypesAndInterfaces/Community/CommunityInterfaces'
import { IUserData } from '../../../customTypesAndInterfaces/User/userInterfaces'
import { auth, db } from '../../../firebaseConfig'
import { setSuggestedCommunities, setTrendingCommunities } from '../../../redux/slices/communityDataSlice'
import { setCurrentUserData, setUserJoinedCommunities } from '../../../redux/slices/userSlice'
import Header from '../../globalComponents/Header/Header'
import LeftSideBar from '../../globalComponents/SideBars/LeftSideBar/LeftSideBar'
import RightSideBar from '../../globalComponents/SideBars/RightSideBar/RightSideBar'
import BottomBar from '../../mobileGlobalComponents/BottomBar/BottomBar'


interface IHomeLayoutProps {
  children: React.ReactNode
  className?: any
}

const BaseOneLayout = ({ children }: IHomeLayoutProps) => {
  // console.log(`-------------- BaseOneLayout is running`)
  const [user, loading] = useAuthState(auth)
  const dispatch = useDispatch()

  // Redux States
  const currentUserData: IUserData = useSelector((state: any) => state.user.currentUserData)
  const userJoinedCommunitiesData: ICommunityData[] = useSelector((state: any) => state.user.userJoinedCommunities)
  const suggestedCommunitiesData: ICommunityData[] = useSelector((state: any) => state.communityData.suggestedCommunities)
  const trendingCommunitiesData: ICommunityData[] = useSelector((state: any) => state.communityData.trendingCommunities)

  const communityCollectionRef = collection(db, "communities")


  // ----  Fetch Current User ---
  const fetchCurrentUser = async () => {
    if (user && !loading) {
      if (!currentUserData?.communitiesJoinedID) {
        console.log(`Setting user data into redux`);
        const userRef = doc(db, "users", user?.uid as string)
        const data = await getDoc(userRef)
        dispatch(setCurrentUserData(data.data()))
      } else if (currentUserData) {
        console.log('user data found from redux')
      }
    }
  }

  // ----  Fetch User Joined Commmunities ---
  const fetchUserJoinedCommunities = async () => {
    if (user && !loading) {
      if (currentUserData?.communitiesJoinedID?.length !== 0) {
        if (!userJoinedCommunitiesData[0]) {
          console.log(`SETTING USER JOINED COMMUNITIES DATA`);
          const queryUser = query(communityCollectionRef, where("communityMembersID", "array-contains", user?.uid))
          const queryRes = await getDocs(queryUser)
          const data = queryRes?.docs?.map(doc => doc.data())
          dispatch(setUserJoinedCommunities(data))

        } else if (userJoinedCommunitiesData[0]) {
          console.log(` USER JOINED COMMUNITIES DATA FOUND FROM REDUX `);
        }
      }

    }
  }

  // ---- Fetch Suggested Communities ---- 
  const fetchSuggestedCommunities = async () => {
    if (!suggestedCommunitiesData[0]) {
      console.log(`SETTING SUGGESTED COMMUNITIES DATA`);
      const queryCommunities = query(communityCollectionRef, where("isCommunitySuggested", "==", true))
      const queryRes = await getDocs(queryCommunities)
      const data = queryRes?.docs?.map(doc => doc.data())
      dispatch(setSuggestedCommunities(data))

    } else if (suggestedCommunitiesData[0]) {
      console.log(` SUGGESTED COMMUNITIES DATA FOUND FROM REDUX `);
    }



  }

  // ---- Fetch Trending Communities ---- 
  const fetchTrendingCommunities = async () => {
    if (!trendingCommunitiesData[0]) {
      console.log(`SETTING Trending COMMUNITIES DATA`);
      const queryCommunities = query(communityCollectionRef, where("isCommunityTrending", "==", true))
      const queryRes = await getDocs(queryCommunities)
      const data = queryRes?.docs?.map(doc => doc.data())
      dispatch(setTrendingCommunities(data))

    } else if (trendingCommunitiesData[0]) {
      console.log(`Trending COMMUNITIES DATA FOUND FROM REDUX `);
    }



  }


  useEffect(() => {
    fetchCurrentUser()
    fetchUserJoinedCommunities()
    fetchSuggestedCommunities()
    fetchTrendingCommunities()
  }, [user])


  return (
    <div className='w-full flex justify-between items-center max-h-screen overflow-hidden bg-white'>
      <Head>
        <title> CommComm </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <LeftSideBar />
      {children}
      <RightSideBar />

      <BottomBar />

    </div>
  )
}

export default BaseOneLayout